// Code generated by go-bindata.
// sources:
// routes/index/favicon.ico
// routes/index/index.html
// routes/index/main.css
// routes/index/main.js
// DO NOT EDIT!

package routes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 0, mode: os.FileMode(436), modTime: time.Unix(1529589120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\x13\x31\x14\xbc\xe7\x2b\x1e\xef\xcc\xd6\xca\x0d\x21\xdb\xa2\x2a\x15\x20\x21\x15\x21\x22\x51\x21\x0e\x8e\xfd\x52\x1b\xbc\xb6\xb1\xdf\xa6\x44\x55\xfe\x1d\x25\x9b\x65\xb7\x87\xee\x65\x3d\x6f\x3c\xe3\xf1\xc8\xf2\xd5\xfb\xbb\x9b\x6f\xf7\x5f\x6e\xc1\x73\x1f\xf5\x4a\x4e\x3f\x32\x4e\xaf\x00\x00\x64\x4f\x6c\xc0\x7a\x53\x1b\xb1\xc2\x81\x77\xdd\x1b\x04\xb1\x24\x3d\x73\xe9\xe8\xcf\x10\xf6\x0a\xbf\x77\x9b\xeb\xee\x26\xf7\xc5\x70\xd8\x46\x42\xb0\x39\x31\x25\x56\xf8\xe9\x56\x91\x7b\x20\xbc\x28\x39\x70\x24\x7d\x6f\xda\xd0\xa8\x4a\x31\xc2\x85\x69\x32\x3d\x29\xdc\x07\x7a\x2c\xb9\xf2\xc2\xe7\x31\x38\xf6\xca\xd1\x3e\x58\xea\xce\xe0\x35\x84\x14\x38\x98\xd8\x35\x6b\x22\xa9\xf5\x74\x46\x0c\xe9\x37\x54\x8a\x0a\x1b\x1f\x22\x35\x4f\xc4\x08\x7c\x28\xa4\x90\xe9\x2f\x0b\xdb\x1a\x82\xaf\xb4\x53\xd8\x9b\x90\xae\xce\x58\xe8\x95\x14\x63\x01\x72\x9b\xdd\x61\x4a\x65\x42\x1a\x97\x67\xe8\xd7\xfa\x30\x85\xf7\xeb\x99\xf8\x48\x31\x66\xf8\x01\x4f\x4f\x70\xb5\xb9\x86\xe3\x11\x7e\xce\xa2\x5d\xae\xfd\xbc\xf5\xf4\x6d\xbe\x7e\x7e\xfb\x6c\x20\x43\x2a\x03\x2f\x42\x22\x94\x68\x2c\xf9\x1c\x1d\x55\x85\x27\x5f\x97\x4f\x61\xe0\x78\x44\x08\x4e\xe1\x50\x23\xea\x97\x4d\xb6\x03\x73\x4e\x08\x7b\x13\x07\x52\xf8\xe1\x6e\x54\x3d\xe4\x85\x48\x8a\xe7\xd1\x66\xa2\xe8\x77\xff\xef\x59\x2e\x55\x88\xb9\x0b\xb9\xcb\x99\xa9\x4e\xc4\x84\xa4\x18\x9b\x93\xcd\xd6\x50\x18\x5a\xb5\x97\x8a\x7f\x35\xd4\x52\x8c\xe3\x73\xd1\xa7\x07\xf7\x2f\x00\x00\xff\xff\x7d\x15\x85\x3a\x87\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 647, mode: os.FileMode(436), modTime: time.Unix(1529598893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xcd\xaa\xc2\x30\x10\xc5\xf1\x7d\x9f\x62\x36\x77\x73\xa1\x50\xc4\x4d\xe3\xd3\xe4\x63\x8c\x83\x69\x4e\x49\xa7\x58\x11\xdf\x5d\x9a\x64\xfb\xcf\xf9\x85\x71\x08\x6f\xfa\x0c\x44\x44\xce\xfa\x67\x2c\xd8\x73\x18\x3d\x12\x8a\xa1\x80\x10\xb9\xb8\xb4\xf3\xad\x2e\x7a\xb6\x49\x3c\xb7\xfa\x1d\x86\xff\xce\x17\x5b\xa2\xe4\x51\xb1\x1a\xba\x4e\xeb\xd1\x88\xf2\xa1\xa3\x4d\x12\xb3\x21\xcf\x59\xb9\x54\xb4\x58\xc9\x8d\xd5\xfd\x65\xfa\xab\xf9\x0e\x28\x97\xf6\xb0\x62\x13\x15\x64\x43\xd6\x6d\x48\xbb\xf6\x23\x1c\x54\xb1\x74\x73\x86\x97\x04\x7d\x18\x9a\xe7\xf3\x8f\x5f\x00\x00\x00\xff\xff\x9c\xc1\x05\x0c\xd0\x00\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 208, mode: os.FileMode(436), modTime: time.Unix(1529598343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6b\xe3\x30\x14\x84\xef\xfe\x15\xb3\xbe\x44\x66\x17\x6f\x28\x3d\xd5\xe8\x12\x28\xb4\x90\xd2\x92\xa4\xd0\xab\x6b\xbf\x38\xa6\x8a\xe4\x4a\x4f\x69\x42\xf1\x7f\x2f\x4a\xe2\x26\x76\x4a\x75\x12\xcc\x37\xf3\x86\x27\x6d\x72\x8b\xca\x4c\x3c\xb3\xd1\x90\x28\x4d\xe1\xd7\xa4\x39\xad\x88\x6f\x15\x85\xeb\x64\x77\x5f\x8a\x51\x65\x46\x49\x16\x05\xda\x5b\x35\x31\xdb\xdf\x58\x6f\x55\x80\xa3\x2e\x37\x35\xba\x50\x75\xf1\x06\x89\xa5\xd7\x05\xd7\x46\x43\x24\xf8\x8c\x00\x20\x44\x2a\xa3\xab\xe7\xd9\x14\xf2\x18\x9e\x6e\x72\xe5\x29\xfb\xd6\xb7\x6b\xb5\x62\x6e\x20\xa1\xe9\x03\x2f\x0f\xd3\x3b\xe6\x66\x46\xef\x9e\x1c\x8b\xe4\xc0\x1d\x99\xd4\x34\xa4\x45\xfc\xf4\x38\x5f\xc4\xff\x10\xff\x8f\x87\xb2\xb6\x94\x97\x3b\xc7\x39\x53\xb1\xca\x75\x45\x3f\xb6\x0a\xa7\x5e\x42\x74\xb6\xbd\x69\x1e\x4c\x90\x12\xd7\xe7\x58\x57\xd2\x42\xe2\x84\xbb\xc6\x68\x47\x0b\xda\x72\xd6\x23\x0b\xa3\x9d\x51\x94\x96\xf4\xea\x2b\x61\x93\xbe\x7a\x3e\x32\x54\xf4\x0e\x7f\x24\xae\xc6\xe3\xe1\xc0\x70\x72\x45\x96\x2f\x22\x5a\x52\x8e\x2e\xe1\xf3\xc5\x42\xc2\x0e\x4c\x51\xff\xd6\x1e\xe4\x7e\xd9\xfd\x52\x6f\x10\xe3\x6f\xf7\x60\x83\xdd\x3a\xd2\xa5\x38\x49\x6d\x16\x45\xc7\xb1\x97\x1f\x40\x24\x87\x8e\xbc\xaa\x5d\xea\x48\x51\xb1\x7f\xc9\x36\xfb\x0a\x00\x00\xff\xff\x17\x55\x32\x2f\x91\x02\x00\x00")

func mainJsBytes() ([]byte, error) {
	return bindataRead(
		_mainJs,
		"main.js",
	)
}

func mainJs() (*asset, error) {
	bytes, err := mainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.js", size: 657, mode: os.FileMode(436), modTime: time.Unix(1529599804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
	"index.html":  indexHtml,
	"main.css":    mainCss,
	"main.js":     mainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
	"index.html":  &bintree{indexHtml, map[string]*bintree{}},
	"main.css":    &bintree{mainCss, map[string]*bintree{}},
	"main.js":     &bintree{mainJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
