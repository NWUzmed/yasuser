// Code generated by go-bindata.
// sources:
// routes/index/favicon.ico
// routes/index/index.html
// routes/index/main.css
// routes/index/main.js
// DO NOT EDIT!

package routes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 0, mode: os.FileMode(436), modTime: time.Unix(1529340254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x4a\x03\x31\x10\x86\xef\xfb\x14\xe3\x9c\xdd\x86\xd5\x8b\x87\x24\x50\x6a\x41\x4f\x7a\xb0\x60\x11\x0f\x69\x76\x6a\xa2\xd9\x6c\x4c\xa6\xad\x4b\xe9\xbb\x0b\xdd\x2d\xf4\x14\xbe\x3f\xc9\x37\xcc\x2f\x6f\x1e\x5f\x16\x6f\xeb\xd7\x25\x38\xee\x82\xae\xe4\xe5\x20\xd3\xea\x0a\x00\x40\x76\xc4\x06\xac\x33\xb9\x10\x2b\xdc\xf1\xb6\x7e\x40\x10\xd7\x97\x8e\x39\xd5\xf4\xbb\xf3\x7b\x85\xef\xf5\x6a\x5e\x2f\xfa\x2e\x19\xf6\x9b\x40\x08\xb6\x8f\x4c\x91\x15\x3e\x2f\x15\xb5\x5f\x84\xd3\x4f\xf6\x1c\x48\xaf\x4d\xd9\x15\xca\x52\x8c\x78\x25\x8d\xa6\x23\x85\x7b\x4f\x87\xd4\x67\xbe\xf2\x1c\x7c\xcb\x4e\xb5\xb4\xf7\x96\xea\x33\xdc\x82\x8f\x9e\xbd\x09\x75\xb1\x26\x90\x6a\x2e\x33\x8a\xcd\x3e\x31\x94\x6c\x15\x76\xc6\xc7\xd9\x77\x41\x2d\xc5\x18\x4f\x6f\x82\x8f\x3f\x90\x29\x28\x2c\x3c\x04\x2a\x8e\x88\x11\x78\x48\xa4\x90\xe9\x8f\x85\x2d\x05\xc1\x65\xda\x4e\x8e\x33\x0b\x5d\x49\x31\x96\x24\x37\x7d\x3b\x4c\x32\xd7\xe8\xe1\xb2\x91\x6b\xa6\x30\xe9\xe6\xee\x5e\x8a\x34\xe2\x13\x85\xd0\xc3\x07\x1c\x8f\x30\x5b\xcd\xe1\x74\x82\xcf\x4a\x8a\xd1\x21\xc5\xb9\xfe\xff\x00\x00\x00\xff\xff\xaa\x9f\x64\xca\x95\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 405, mode: os.FileMode(436), modTime: time.Unix(1529339672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x50\x50\x48\x4a\x4c\xce\x4e\x2f\xca\x2f\xcd\x4b\xd1\x4d\xce\xcf\xc9\x2f\xb2\x52\x48\xc9\x4f\x49\x4f\x2d\x4a\xca\x29\x4d\xb5\x06\xab\x80\x0a\x27\xe6\x64\x26\xa7\x42\x44\x6b\xb9\xb8\x32\x0c\x71\xea\x57\xb6\x30\x48\x4e\x4d\x31\x03\x2b\x4b\xc9\x2c\xc3\xad\x2e\xc5\x34\xcd\x24\x15\xa2\xae\xb8\x20\x31\x0f\xb7\xc2\x34\x43\x0b\x4b\x73\x63\x6b\xae\x5a\x40\x00\x00\x00\xff\xff\xaa\x1d\x4b\x2e\xb8\x00\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 184, mode: os.FileMode(436), modTime: time.Unix(1529339661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x48\xcc\x49\x2d\x2a\xd1\x30\xd4\x04\x04\x00\x00\xff\xff\xbc\x04\xd4\x9f\x0b\x00\x00\x00")

func mainJsBytes() ([]byte, error) {
	return bindataRead(
		_mainJs,
		"main.js",
	)
}

func mainJs() (*asset, error) {
	bytes, err := mainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.js", size: 11, mode: os.FileMode(436), modTime: time.Unix(1529339031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
	"index.html":  indexHtml,
	"main.css":    mainCss,
	"main.js":     mainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
	"index.html":  &bintree{indexHtml, map[string]*bintree{}},
	"main.css":    &bintree{mainCss, map[string]*bintree{}},
	"main.js":     &bintree{mainJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
