// Code generated by go-bindata.
// sources:
// routes/index/favicon.ico
// routes/index/index.html
// routes/index/main.css
// routes/index/main.js
// DO NOT EDIT!

package routes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 0, mode: os.FileMode(436), modTime: time.Unix(1529589120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xcf\x6e\xe3\x20\x10\x87\xef\x79\x8a\xd9\x39\xaf\x83\xbc\x7b\xd9\x03\xa0\x8d\xd2\x48\xed\xa9\x3d\x34\x52\xa3\xaa\x07\x82\x27\x85\x16\xdb\x14\x26\x49\xad\xc8\xef\x5e\xc5\x7f\xa4\x9c\xd0\xf7\x63\xe6\x1b\xc1\xc8\x5f\x77\x8f\xeb\xe7\xdd\xd3\x06\x1c\xd7\x41\x2f\xe4\x7c\x90\xa9\xf4\x02\x00\x40\xd6\xc4\x06\xac\x33\x29\x13\x2b\x3c\xf2\xa1\xf8\x87\x20\x6e\x2f\x1d\x73\x2c\xe8\xeb\xe8\x4f\x0a\x5f\x8a\xed\xaa\x58\xb7\x75\x34\xec\xf7\x81\x10\x6c\xdb\x30\x35\xac\xf0\x61\xa3\xa8\x7a\x27\x9c\x3a\xd9\x73\x20\xbd\x33\xf9\x98\x29\x49\x31\xe2\x8d\xb4\x31\x35\x29\x3c\x79\x3a\xc7\x36\xf1\x8d\xe7\xec\x2b\x76\xaa\xa2\x93\xb7\x54\x0c\xf0\x1b\x7c\xe3\xd9\x9b\x50\x64\x6b\x02\xa9\x72\x9e\x91\x6d\xf2\x91\x21\x27\xab\xb0\x36\xbe\x59\x7e\x64\xd4\x52\x8c\xf1\x54\x13\x7c\xf3\x09\x89\x82\xc2\xcc\x5d\xa0\xec\x88\x18\x81\xbb\x48\x0a\x99\xbe\x59\xd8\x9c\x11\x5c\xa2\xc3\xe4\x18\x58\xe8\x85\x14\xe3\x27\xc9\x7d\x5b\x75\x93\xcc\x95\xba\x9b\x5f\xe4\xca\x29\x8c\xba\xfc\xf3\x57\x8a\x38\xe2\x3d\x85\xd0\xc2\x2b\x5c\x2e\xb0\xdc\xae\xa0\xef\xe1\x6d\x2e\xfb\x7f\xcd\xaa\xf6\x3a\x05\xfa\x7e\xe8\x90\x62\xb4\x4b\x31\x2c\xe6\x27\x00\x00\xff\xff\x42\x87\x70\x4e\xaf\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 431, mode: os.FileMode(436), modTime: time.Unix(1529597108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x50\x50\x48\x4a\x4c\xce\x4e\x2f\xca\x2f\xcd\x4b\xd1\x4d\xce\xcf\xc9\x2f\xb2\x52\x48\xc9\x4f\x49\x4f\x2d\x4a\xca\x29\x4d\xb5\x06\xab\x80\x0a\x27\xe6\x64\x26\xa7\x42\x44\x6b\xb9\xb8\x52\x32\xcb\x70\x1a\xa0\x9c\x62\x9a\x66\x92\x6a\x06\x56\x57\x5c\x90\x98\x87\x5b\x61\x9a\xa1\x85\xa5\xb9\xb1\x35\x57\x2d\x20\x00\x00\xff\xff\xcb\xed\x59\x17\x91\x00\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 145, mode: os.FileMode(436), modTime: time.Unix(1529589175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x48\xcc\x49\x2d\x2a\xd1\x30\xd4\x04\x04\x00\x00\xff\xff\xbc\x04\xd4\x9f\x0b\x00\x00\x00")

func mainJsBytes() ([]byte, error) {
	return bindataRead(
		_mainJs,
		"main.js",
	)
}

func mainJs() (*asset, error) {
	bytes, err := mainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.js", size: 11, mode: os.FileMode(436), modTime: time.Unix(1529589120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
	"index.html":  indexHtml,
	"main.css":    mainCss,
	"main.js":     mainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
	"index.html":  &bintree{indexHtml, map[string]*bintree{}},
	"main.css":    &bintree{mainCss, map[string]*bintree{}},
	"main.js":     &bintree{mainJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
